{
  "results": {
    "arc_challenge": {
      "alias": "arc_challenge",
      "acc,none": 0.28071672354948807,
      "acc_stderr,none": 0.013131238126975468,
      "acc_norm,none": 0.2935153583617747,
      "acc_norm_stderr,none": 0.013307250444941061
    },
    "arc_easy": {
      "alias": "arc_easy",
      "acc,none": 0.6325757575757576,
      "acc_stderr,none": 0.009892552616211405,
      "acc_norm,none": 0.5829124579124579,
      "acc_norm_stderr,none": 0.010117738967782014
    },
    "hellaswag": {
      "alias": "hellaswag",
      "acc,none": 0.3543118900617407,
      "acc_stderr,none": 0.0047732675101126555,
      "acc_norm,none": 0.4356701852220673,
      "acc_norm_stderr,none": 0.00494831039974591
    },
    "lambada_openai": {
      "alias": "lambada_openai",
      "perplexity,none": 28.759037149679585,
      "perplexity_stderr,none": 1.0655742926227476,
      "acc,none": 0.37065786920240634,
      "acc_stderr,none": 0.006728869231429874
    },
    "nq_open": {
      "alias": "nq_open",
      "exact_match,remove_whitespace": 0.0221606648199446,
      "exact_match_stderr,remove_whitespace": 0.0024503702060076704
    },
    "piqa": {
      "alias": "piqa",
      "acc,none": 0.6746463547334058,
      "acc_stderr,none": 0.010931036623525334,
      "acc_norm,none": 0.675734494015234,
      "acc_norm_stderr,none": 0.010921539041347943
    },
    "sciq": {
      "alias": "sciq",
      "acc,none": 0.853,
      "acc_stderr,none": 0.011203415395160376,
      "acc_norm,none": 0.798,
      "acc_norm_stderr,none": 0.012702651587655128
    },
    "social_iqa": {
      "alias": "social_iqa",
      "acc,none": 0.38996929375639716,
      "acc_stderr,none": 0.011036717652939601
    },
    "triviaqa": {
      "alias": "triviaqa",
      "exact_match,remove_whitespace": 0.04374721355327686,
      "exact_match_stderr,remove_whitespace": 0.0015269120637065648
    },
    "wikitext": {
      "alias": "wikitext",
      "word_perplexity,none": 24.013964292465424,
      "word_perplexity_stderr,none": "N/A",
      "byte_perplexity,none": 1.8119810126502112,
      "byte_perplexity_stderr,none": "N/A",
      "bits_per_byte,none": 0.8575678377798976,
      "bits_per_byte_stderr,none": "N/A"
    }
  },
  "group_subtasks": {
    "arc_challenge": [],
    "arc_easy": [],
    "hellaswag": [],
    "lambada_openai": [],
    "nq_open": [],
    "piqa": [],
    "sciq": [],
    "social_iqa": [],
    "triviaqa": [],
    "wikitext": []
  },
  "configs": {
    "arc_challenge": {
      "task": "arc_challenge",
      "tag": [
        "ai2_arc"
      ],
      "dataset_path": "allenai/ai2_arc",
      "dataset_name": "ARC-Challenge",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Question: {{question}}\nAnswer:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "unsafe_code": false,
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Question: {{question}}\nAnswer:",
      "metadata": {
        "version": 1.0,
        "pretrained": "zaydzuhri/myopic-340M-4096-model",
        "dtype": "bfloat16",
        "max_length": 4096
      }
    },
    "arc_easy": {
      "task": "arc_easy",
      "tag": [
        "ai2_arc"
      ],
      "dataset_path": "allenai/ai2_arc",
      "dataset_name": "ARC-Easy",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Question: {{question}}\nAnswer:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "unsafe_code": false,
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Question: {{question}}\nAnswer:",
      "metadata": {
        "version": 1.0,
        "pretrained": "zaydzuhri/myopic-340M-4096-model",
        "dtype": "bfloat16",
        "max_length": 4096
      }
    },
    "hellaswag": {
      "task": "hellaswag",
      "tag": [
        "multiple_choice"
      ],
      "dataset_path": "Rowan/hellaswag",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "unsafe_code": false,
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "pretrained": "zaydzuhri/myopic-340M-4096-model",
        "dtype": "bfloat16",
        "max_length": 4096
      }
    },
    "lambada_openai": {
      "task": "lambada_openai",
      "tag": [
        "lambada"
      ],
      "dataset_path": "EleutherAI/lambada_openai",
      "dataset_name": "default",
      "test_split": "test",
      "doc_to_text": "{{text.split(' ')[:-1]|join(' ')}}",
      "doc_to_target": "{{' '+text.split(' ')[-1]}}",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "perplexity",
          "aggregation": "perplexity",
          "higher_is_better": false
        },
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "loglikelihood",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "{{text}}",
      "metadata": {
        "version": 1.0,
        "pretrained": "zaydzuhri/myopic-340M-4096-model",
        "dtype": "bfloat16",
        "max_length": 4096
      }
    },
    "nq_open": {
      "task": "nq_open",
      "dataset_path": "nq_open",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "Q: {{question}}?\nA:",
      "doc_to_target": "{{answer}}",
      "unsafe_code": false,
      "description": "Answer these questions:\n\n",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true,
          "regexes_to_ignore": [
            "\\b(?:The |the |An |A |The |a |an )"
          ]
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n",
          ".",
          ","
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "remove_whitespace",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 4.0,
        "pretrained": "zaydzuhri/myopic-340M-4096-model",
        "dtype": "bfloat16",
        "max_length": 4096
      }
    },
    "piqa": {
      "task": "piqa",
      "dataset_path": "baber/piqa",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "Question: {{goal}}\nAnswer:",
      "doc_to_target": "label",
      "unsafe_code": false,
      "doc_to_choice": "{{[sol1, sol2]}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "goal",
      "metadata": {
        "version": 1.0,
        "pretrained": "zaydzuhri/myopic-340M-4096-model",
        "dtype": "bfloat16",
        "max_length": 4096
      }
    },
    "sciq": {
      "task": "sciq",
      "dataset_path": "sciq",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "{{support.lstrip()}}\nQuestion: {{question}}\nAnswer:",
      "doc_to_target": 3,
      "unsafe_code": false,
      "doc_to_choice": "{{[distractor1, distractor2, distractor3, correct_answer]}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "{{support}} {{question}}",
      "metadata": {
        "version": 1.0,
        "pretrained": "zaydzuhri/myopic-340M-4096-model",
        "dtype": "bfloat16",
        "max_length": 4096
      }
    },
    "social_iqa": {
      "task": "social_iqa",
      "dataset_path": "social_i_qa",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "Q: {{context}} {{question}}\nA:",
      "doc_to_target": "{{ (label|int) - 1 }}",
      "unsafe_code": false,
      "doc_to_choice": "{{[answerA, answerB, answerC]}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 0.0,
        "pretrained": "zaydzuhri/myopic-340M-4096-model",
        "dtype": "bfloat16",
        "max_length": 4096
      }
    },
    "triviaqa": {
      "task": "triviaqa",
      "dataset_path": "trivia_qa",
      "dataset_name": "rc.nocontext",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "Question: {{question}}?\nAnswer:",
      "doc_to_target": "{{answer.aliases}}",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n",
          ".",
          ","
        ],
        "do_sample": false,
        "temperature": 0.0
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "remove_whitespace",
          "filter": [
            {
              "function": "remove_whitespace"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": true,
      "doc_to_decontamination_query": "question",
      "metadata": {
        "version": 3.0,
        "pretrained": "zaydzuhri/myopic-340M-4096-model",
        "dtype": "bfloat16",
        "max_length": 4096
      }
    },
    "wikitext": {
      "task": "wikitext",
      "dataset_path": "EleutherAI/wikitext_document_level",
      "dataset_name": "wikitext-2-raw-v1",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "",
      "doc_to_target": "def wikitext_detokenizer(doc):\n    string = doc[\"page\"]\n    # contractions\n    string = string.replace(\"s '\", \"s'\")\n    string = re.sub(r\"/' [0-9]/\", r\"/'[0-9]/\", string)\n    # number separators\n    string = string.replace(\" @-@ \", \"-\")\n    string = string.replace(\" @,@ \", \",\")\n    string = string.replace(\" @.@ \", \".\")\n    # punctuation\n    string = string.replace(\" : \", \": \")\n    string = string.replace(\" ; \", \"; \")\n    string = string.replace(\" . \", \". \")\n    string = string.replace(\" ! \", \"! \")\n    string = string.replace(\" ? \", \"? \")\n    string = string.replace(\" , \", \", \")\n    # double brackets\n    string = re.sub(r\"\\(\\s*([^\\)]*?)\\s*\\)\", r\"(\\1)\", string)\n    string = re.sub(r\"\\[\\s*([^\\]]*?)\\s*\\]\", r\"[\\1]\", string)\n    string = re.sub(r\"{\\s*([^}]*?)\\s*}\", r\"{\\1}\", string)\n    string = re.sub(r\"\\\"\\s*([^\\\"]*?)\\s*\\\"\", r'\"\\1\"', string)\n    string = re.sub(r\"'\\s*([^']*?)\\s*'\", r\"'\\1'\", string)\n    # miscellaneous\n    string = string.replace(\"= = = =\", \"====\")\n    string = string.replace(\"= = =\", \"===\")\n    string = string.replace(\"= =\", \"==\")\n    string = string.replace(\" \" + chr(176) + \" \", chr(176))\n    string = string.replace(\" \\n\", \"\\n\")\n    string = string.replace(\"\\n \", \"\\n\")\n    string = string.replace(\" N \", \" 1 \")\n    string = string.replace(\" 's\", \"'s\")\n\n    return string\n",
      "unsafe_code": false,
      "process_results": "def process_results(doc, results):\n    (loglikelihood,) = results\n    # IMPORTANT: wikitext counts number of words in *original doc before detokenization*\n    _words = len(re.split(r\"\\s+\", doc[\"page\"]))\n    _bytes = len(doc[\"page\"].encode(\"utf-8\"))\n    return {\n        \"word_perplexity\": (loglikelihood, _words),\n        \"byte_perplexity\": (loglikelihood, _bytes),\n        \"bits_per_byte\": (loglikelihood, _bytes),\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "word_perplexity"
        },
        {
          "metric": "byte_perplexity"
        },
        {
          "metric": "bits_per_byte"
        }
      ],
      "output_type": "loglikelihood_rolling",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "{{page}}",
      "metadata": {
        "version": 2.0,
        "pretrained": "zaydzuhri/myopic-340M-4096-model",
        "dtype": "bfloat16",
        "max_length": 4096
      }
    }
  },
  "versions": {
    "arc_challenge": 1.0,
    "arc_easy": 1.0,
    "hellaswag": 1.0,
    "lambada_openai": 1.0,
    "nq_open": 4.0,
    "piqa": 1.0,
    "sciq": 1.0,
    "social_iqa": 0.0,
    "triviaqa": 3.0,
    "wikitext": 2.0
  },
  "n-shot": {
    "arc_challenge": 0,
    "arc_easy": 0,
    "hellaswag": 0,
    "lambada_openai": 0,
    "nq_open": 0,
    "piqa": 0,
    "sciq": 0,
    "social_iqa": 0,
    "triviaqa": 0,
    "wikitext": 0
  },
  "higher_is_better": {
    "arc_challenge": {
      "acc": true,
      "acc_norm": true
    },
    "arc_easy": {
      "acc": true,
      "acc_norm": true
    },
    "hellaswag": {
      "acc": true,
      "acc_norm": true
    },
    "lambada_openai": {
      "perplexity": false,
      "acc": true
    },
    "nq_open": {
      "exact_match": true
    },
    "piqa": {
      "acc": true,
      "acc_norm": true
    },
    "sciq": {
      "acc": true,
      "acc_norm": true
    },
    "social_iqa": {
      "acc": true
    },
    "triviaqa": {
      "exact_match": true
    },
    "wikitext": {
      "word_perplexity": false,
      "byte_perplexity": false,
      "bits_per_byte": false
    }
  },
  "n-samples": {
    "wikitext": {
      "original": 62,
      "effective": 62
    },
    "triviaqa": {
      "original": 17944,
      "effective": 17944
    },
    "social_iqa": {
      "original": 1954,
      "effective": 1954
    },
    "sciq": {
      "original": 1000,
      "effective": 1000
    },
    "piqa": {
      "original": 1838,
      "effective": 1838
    },
    "nq_open": {
      "original": 3610,
      "effective": 3610
    },
    "lambada_openai": {
      "original": 5153,
      "effective": 5153
    },
    "hellaswag": {
      "original": 10042,
      "effective": 10042
    },
    "arc_easy": {
      "original": 2376,
      "effective": 2376
    },
    "arc_challenge": {
      "original": 1172,
      "effective": 1172
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=zaydzuhri/myopic-340M-4096-model,dtype=bfloat16,max_length=4096,trust_remote_code=True",
    "model_num_parameters": 373867520,
    "model_dtype": "torch.bfloat16",
    "model_revision": "main",
    "model_sha": "ad75595dff792474d0f8b34b56ff96c7737907ca",
    "batch_size": "256",
    "batch_sizes": [],
    "device": "cuda:0",
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "6eaff8e",
  "date": 1755680397.1545212,
  "pretty_env_info": "PyTorch version: 2.6.0+cu124\nIs debug build: False\nCUDA used to build PyTorch: 12.4\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 24.04.2 LTS (x86_64)\nGCC version: (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\nClang version: Could not collect\nCMake version: Could not collect\nLibc version: glibc-2.39\n\nPython version: 3.12.11 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:09:17) [GCC 11.2.0] (64-bit runtime)\nPython platform: Linux-6.8.0-62-generic-x86_64-with-glibc2.39\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA H200\nGPU 1: NVIDIA H200\nGPU 2: NVIDIA H200\nGPU 3: NVIDIA H200\nGPU 4: NVIDIA H200\nGPU 5: NVIDIA H200\nGPU 6: NVIDIA H200\nGPU 7: NVIDIA H200\n\nNvidia driver version: 570.133.20\ncuDNN version: Could not collect\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                         x86_64\nCPU op-mode(s):                       32-bit, 64-bit\nAddress sizes:                        52 bits physical, 57 bits virtual\nByte Order:                           Little Endian\nCPU(s):                               128\nOn-line CPU(s) list:                  0-127\nVendor ID:                            GenuineIntel\nModel name:                           06/cf\nCPU family:                           6\nModel:                                207\nThread(s) per core:                   2\nCore(s) per socket:                   32\nSocket(s):                            2\nStepping:                             2\nBogoMIPS:                             4600.00\nFlags:                                fpu vme de pse tsc msr pae mce cx8 apic sep pge mca cmov pat clflush dts mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc bts rep_good nopl tsc_reliable nonstop_tsc cpuid tsc_known_freq pni pclmulqdq dtes64 ds_cpl ssse3 fma cx16 pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch cpuid_fault ssbd ibrs ibpb stibp ibrs_enhanced tdx_guest fsgsbase bmi1 avx2 smep bmi2 erms invpcid avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves avx_vnni avx512_bf16 wbnoinvd avx512vbmi umip pku ospke avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq la57 rdpid bus_lock_detect cldemote movdiri movdir64b fsrm md_clear serialize tsxldtrk amx_bf16 avx512_fp16 amx_tile amx_int8 flush_l1d arch_capabilities\nHypervisor vendor:                    KVM\nVirtualization type:                  full\nL1d cache:                            2 MiB (64 instances)\nL1i cache:                            2 MiB (64 instances)\nL2 cache:                             256 MiB (64 instances)\nL3 cache:                             32 MiB (2 instances)\nNUMA node(s):                         1\nNUMA node0 CPU(s):                    0-127\nVulnerability Gather data sampling:   Not affected\nVulnerability Itlb multihit:          Not affected\nVulnerability L1tf:                   Not affected\nVulnerability Mds:                    Not affected\nVulnerability Meltdown:               Not affected\nVulnerability Mmio stale data:        Not affected\nVulnerability Reg file data sampling: Not affected\nVulnerability Retbleed:               Not affected\nVulnerability Spec rstack overflow:   Not affected\nVulnerability Spec store bypass:      Mitigation; Speculative Store Bypass disabled via prctl\nVulnerability Spectre v1:             Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:             Mitigation; Enhanced / Automatic IBRS; IBPB conditional; RSB filling; PBRSB-eIBRS SW sequence; BHI BHI_DIS_S\nVulnerability Srbds:                  Not affected\nVulnerability Tsx async abort:        Not affected\n\nVersions of relevant libraries:\n[pip3] numpy==2.3.2\n[pip3] nvidia-cublas-cu12==12.4.5.8\n[pip3] nvidia-cuda-cupti-cu12==12.4.127\n[pip3] nvidia-cuda-nvrtc-cu12==12.4.127\n[pip3] nvidia-cuda-runtime-cu12==12.4.127\n[pip3] nvidia-cudnn-cu12==9.1.0.70\n[pip3] nvidia-cufft-cu12==11.2.1.3\n[pip3] nvidia-curand-cu12==10.3.5.147\n[pip3] nvidia-cusolver-cu12==11.6.1.9\n[pip3] nvidia-cusparse-cu12==12.3.1.170\n[pip3] nvidia-cusparselt-cu12==0.6.2\n[pip3] nvidia-nccl-cu12==2.21.5\n[pip3] nvidia-nvjitlink-cu12==12.4.127\n[pip3] nvidia-nvtx-cu12==12.4.127\n[pip3] torch==2.6.0\n[pip3] torchdata==0.11.0\n[pip3] triton==3.2.0\n[conda] numpy                       2.3.2            pypi_0           pypi\n[conda] nvidia-cublas-cu12          12.4.5.8         pypi_0           pypi\n[conda] nvidia-cuda-cupti-cu12      12.4.127         pypi_0           pypi\n[conda] nvidia-cuda-nvrtc-cu12      12.4.127         pypi_0           pypi\n[conda] nvidia-cuda-runtime-cu12    12.4.127         pypi_0           pypi\n[conda] nvidia-cudnn-cu12           9.1.0.70         pypi_0           pypi\n[conda] nvidia-cufft-cu12           11.2.1.3         pypi_0           pypi\n[conda] nvidia-curand-cu12          10.3.5.147       pypi_0           pypi\n[conda] nvidia-cusolver-cu12        11.6.1.9         pypi_0           pypi\n[conda] nvidia-cusparse-cu12        12.3.1.170       pypi_0           pypi\n[conda] nvidia-cusparselt-cu12      0.6.2            pypi_0           pypi\n[conda] nvidia-nccl-cu12            2.21.5           pypi_0           pypi\n[conda] nvidia-nvjitlink-cu12       12.4.127         pypi_0           pypi\n[conda] nvidia-nvtx-cu12            12.4.127         pypi_0           pypi\n[conda] torch                       2.6.0            pypi_0           pypi\n[conda] torchdata                   0.11.0           pypi_0           pypi\n[conda] triton                      3.2.0            pypi_0           pypi",
  "transformers_version": "4.51.3",
  "lm_eval_version": "0.4.9",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<unk>",
    "0"
  ],
  "tokenizer_eos_token": [
    "</s>",
    "2"
  ],
  "tokenizer_bos_token": [
    "<s>",
    "1"
  ],
  "eot_token_id": 2,
  "max_length": 4096,
  "task_hashes": {},
  "model_source": "hf",
  "model_name": "zaydzuhri/myopic-340M-4096-model",
  "model_name_sanitized": "zaydzuhri__myopic-340M-4096-model",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 2151236.622709168,
  "end_time": 2159696.643978644,
  "total_evaluation_time_seconds": "8460.021269476041"
}